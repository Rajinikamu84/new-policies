# imports
import "tfplan"

# Find all resources of a specific type
# from all modules using the tfplan import
find_resources_from_plan = func(type) {

  # Start with an empty list
  resources = []

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Append all resources of the specified type
    # or the empty map, {}, if the module does not have any
    append(resources, tfplan.module(path).resources[type] else {})
  }

  return resources
}

# Validate that all VMware VMs have at most 4 CPUs
validate_disk_size = func() {

  # Initialize validated to true
  # This will be set to false if any instances violate rule
  validated = true

  # Get all VMware VMs
  all_resources = find_resources_from_plan("vsphere_virtual_machine")

  # Loop through the module-level resource maps
  for all_resources as resource_map {
    # Loop through the named resources
    for resource_map as name, instances {
      # Loop through resource instances
      for instances as index, r {

        # Skip resources that are being destroyed
        # to avoid unnecessary policy violations
        if length(r.diff) == 0 {
          print("Skipping resource", name + "-" + string(index), "that is being destroyed.")
          continue
        }

        # Get all disks for the VM
        for r.applied.disk as disk {
          # Validate that each disk has valid disk size
          # If not, print violation message
          if int(disk.size) > 100 {
            print("virtual machine", name + "-" + string(index),
            "has disk", disk.label, "with size",
            disk.size, "that is greater than the limit", 100)
            validated = false
          }

        } // end disks
      } // end resource instances
    } // end named resources
  } // end resorce maps

  # Return validated which will be false if any violators
  return validated
}

# Rule to restrict CPUs and memory
vm_disks_validated = validate_disk_size()
limit_vm_disk_size = rule {
  vm_disks_validated
}

# Main rule that requires other rules to be true
main = rule {
  limit_vm_disk_size
}
