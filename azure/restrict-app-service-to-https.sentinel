##### restrict-app-service-to-https.sentinel #####
# This policy uses the Sentinel tfplan import to require that
# all Azure app services have https_only set to true so that
# they can only be accessed via HTTPS

##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type
# from all modules using the tfplan import
find_resources_from_plan = func(type) {

  # Start with an empty map
  resource_maps = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {

    # Append all resources of the specified type to resource_maps
    # setting the key to the module path. Set the empty map, {}, If the
    # module does not have any resources of the specified type.
    resource_maps[path] = tfplan.module(path).resources[type] else {}
  }

  # return resource_maps
  return resource_maps
}

# Get the full address of a resource instance including modules, type,
# name, and index in form module.<A>.module.<B>.<type>.<name>[<index>]
# module_path is like module paths returned by tfplan.module_paths
get_instance_address = func(module_path, type, name, index) {

  # Handle root and non-root modules differently
  if length(module_path) == 0 {
    # root module
    address = type + "." + name + "[" + string(index) + "]"
  } else {
    # non-root module
    address = "module." + strings.join(module_path, ".module.") + "." + type + "." + name + "[" + string(index) + "]"
  }

  return address

}

# Validate that all Azure App Services have https_only set to true
validate_app_services = func() {

  # Initialize validated to true
  # This will be set to false if any instances violate rule
  validated = true

  # Set resource_type
  resource_type = "azurerm_app_service"

  # Get all resources of specified type
  resource_maps = find_resources_from_plan(resource_type)

  # Loop through the module-level resource maps
  for resource_maps as module_path, resource_map {
    # Loop through the named resources
    for resource_map as name, instances {
      # Loop through resource instances
      for instances as index, r {

        # Get addresses of the resource and the instance
        address = get_instance_address(module_path, resource_type, name, index)

        # Skip resources that are being destroyed
        # to avoid unnecessary policy violations
        if length(r.diff) == 0 {
          print("Skipping resource", address,
            "that is being destroyed.")
          continue
        }

        # Determine if the attribute is computed
        if r.diff["https_only"].computed is true {

          # Print message indicating a computed value was found
          print("resource", address,
            "has attribute, https_only, that is computed.")

          # If you want computed values to cause the policy to fail,
          # uncomment the next line.
          #validated = false

          # Skip to next instance since Sentinel cannot validate
          # computed values.
          continue
        }

        # Validate that each app service has https_only set to true
        # If not, print violation message
        if r.applied.https_only is not true {
          print("Azure app service", address,
            "has attribute https_only that is not set to true.")
          validated = false
        }

      } // end resource instances
    } // end named resources
  } // end resorce maps

  # Return validated which will be false if there were any violators
  return validated
}

##### Rules #####

# Rule to restrict Azure app services to use HTTPS
app_service_only_allows_https = rule {
  validate_app_services()
}

# Main rule that requires other rules to be true
main = rule {
  app_service_only_allows_https
}
