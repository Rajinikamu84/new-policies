##### restrict-vm-size.sentinel #####
# This policy uses the Sentinel tfplan import to require that
# all Azure VMs have vm size from an allowed list

##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type
# from all modules using the tfplan import
find_resources_from_plan = func(type) {

  # Start with an empty map
  resource_maps = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {

    # Append all resources of the specified type to resource_maps
    # setting the key to the module path. Set the empty map, {}, If the
    # module does not have any resources of the specified type.
    resource_maps[path] = tfplan.module(path).resources[type] else {}
  }

  # return resource_maps
  return resource_maps
}

# Get the full address of a resource instance including modules, type,
# name, and index in form module.<A>.module.<B>.<type>.<name>[<index>]
# module_path is like module paths returned by tfplan.module_paths
get_instance_address = func(module_path, type, name, index) {

  # Handle root and non-root modules differently
  if length(module_path) == 0 {
    # root module
    address = type + "." + name + "[" + string(index) + "]"
  } else {
    # non-root module
    address = "module." + strings.join(module_path, ".module.") + "." + type + "." + name + "[" + string(index) + "]"
  }

  return address

}

# Validate that all Azure VMs have vm_size
# in allowed_sizes list
validate_vm_sizes = func(allowed_sizes) {

  # Initialize validated to true
  # This will be set to false if any instances violate rule
  validated = true

  # Set resource_type
  resource_type = "azurerm_virtual_machine"

  # Get all resources of specified type
  resource_maps = find_resources_from_plan(resource_type)

  # Loop through the module-level resource maps
  for resource_maps as module_path, resource_map {
    # Loop through the named resources
    for resource_map as name, instances {
      # Loop through resource instances
      for instances as index, r {

        # Get addresses of the resource and the instance
        address = get_instance_address(module_path, resource_type, name, index)

        # Skip resources that are being destroyed
        # to avoid unnecessary policy violations
        if length(r.diff) == 0 {
          print("Skipping resource", address,
            "that is being destroyed.")
          continue
        }

        # Determine if the attribute is computed
        if r.diff["vm_size"].computed else false is true {

          # Print message indicating a computed value was found
          print("Azure VM", address,
            "has attribute, vm_size, that is computed.")

          # If you want computed values to cause the policy to fail,
          # uncomment the next line.
          #validated = false
        } else {
          # Validate that each VM has allowed size
          # If not, print violation message
          if r.applied.vm_size not in allowed_sizes {
            print("Azure VM", address, "has attribute", r.applied.vm_size,
              "that is not in the allowed list:", allowed_sizes)
            validated = false
          }
        } // end computed check

      } // end resource instances
    } // end named resources
  } // end resorce maps

  # Return validated which will be false if there were any violators
  return validated
}

##### Lists #####

# Allowed Azure VM Sizes
allowed_vm_sizes = [
  "Standard_A1",
  "Standard_A2",
  "Standard_D1_v2",
  "Standard_D2_v2",
]

##### Rules #####

# Call the validation function and assign results
vm_size_allowed = validate_vm_sizes(allowed_vm_sizes)

# Main rule
main = rule {
  vm_size_allowed is true
}
