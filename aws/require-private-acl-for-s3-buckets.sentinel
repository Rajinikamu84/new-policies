import "tfplan"

# Find all resources of a specific type
# from all modules using the tfplan import
find_resources_from_plan = func(type) {

  # Start with an empty list
  resources = []

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Append all resources of the specified type
    # or the empty map, {}, if the module does not have any
    append(resources, (tfplan.module(path).resources[type] else {}))
  }

  return resources
}

# Function to validate that ACL is private
validate_private_acl = func() {

  # Get all S3 buckets
  resource_maps = find_resources_from_plan("aws_s3_bucket")

  # Initialize private to true
  # It will be set to false if any instances do not have private ACL
  private = true

  # Loop through the module-level resource maps
  for resource_maps as resource_map {
    # Loop through the named resources
    for resource_map as name, instances {
      # Loop through resource instances
      for instances as index, r {

        # Skip resources that are being destroyed
        # to avoid unnecessary policy violations
        if length(r.diff) == 0 {
          print("Skipping bucket", name + "-" + string(index),
            "that is being destroyed.")
          continue
        }

        # Check whether ACL is private
        if r.applied.acl is not "private" {
          print("S3 bucket", name + "-" + string(index),
          "has ACL", r.applied.acl,
          "that is not private.")
          private = false
        }

      } // end resource instances
    } // end named resources
  } // end resorce maps

  return private
}

# Rule to require all buckets have ACL private
require_private_acl = rule {
  validate_private_acl() is true
}

# Main rule that requires other rules to be true
main = rule {
  require_private_acl
}
