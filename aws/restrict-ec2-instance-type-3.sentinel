# This policy uses the Sentinel tfplan import to require that
# all EC2 instances have instance types from an allowed list

##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type
# from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Append all resource instances to resources map,
        # setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

# Validate that all EC2 instances have instance_type in allowed_types list
validate_ec2_instance_types = func(allowed_types) {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan("aws_instance")

  # Loop through the resources
  for resource_instances as address, r {

    # Skip resources that are being destroyed
    # to avoid unnecessary policy violations
    if length(r.diff) == 0 {
      print("Skipping resource", address,
        "that is being destroyed.")
      continue
    }

    # Determine if the attribute is computed
    if r.diff["instance_type"].computed else false is true {
      print("EC2 instance", address,
            "has attribute, instance_type, that is computed.")
    } else {
      # Validate that each instance has allowed value
      if r.applied.instance_type not in allowed_types {
        print("EC2 instance", address, "has instance_type",
          r.applied.instance_type, "that is not in the allowed list:", allowed_types)
        validated = false
      }
    }

  }

  return validated
}

##### Lists #####

# Allowed EC2 Instance Types
# We don't include t2.micro to illustrate overriding failed policy
allowed_types = [
  "t2.small",
  "t2.medium",
  "t2.large",
]

##### Rules #####

# Call the validation function and assign results
instance_type_allowed = validate_ec2_instance_types(allowed_types)

# Main rule that requires other rules to be true
main = rule {
  instance_type_allowed is true
}
