# imports
import "tfplan"

# Find all resources of a specific type
# from all modules using the tfplan import
find_resources_from_plan = func(type) {

  # Start with an empty list
  resources = []

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Append all resources of the specified type
    # or the empty map, {}, if the module does not have any
    append(resources, (tfplan.module(path).resources[type] else {}))
  }

  return resources
}

# Allowed RDS DB Engines
allowed_engines = [
  "mysql",
  "oracle-se1",
  "oracle-se2",
  "postgres",
]

# Validate that all RDS DB instances have engine
# in allowed_engines list
validate_engines = func() {

  # Initialize validated to true
  # This will be set to false if any DB instances violate rule
  validated = true

  # Get all DB instances
  resource_maps = find_resources_from_plan("aws_db_instance")

  # Loop through the module-level resource maps
  for resource_maps as resource_map {
    # Loop through the named resources
    for resource_map as name, instances {
      # Loop through resource instances
      for instances as index, r {

        # Skip resources that are being destroyed
        # to avoid unnecessary policy violations
        if length(r.diff) == 0 {
          print("Skipping DB instance", name + "-" + string(index),
            "that is being destroyed.")
          continue
        }

        # Validate that each instance has allowed value
        # If not, print violation message
        if r.applied.engine not in allowed_engines {
          print("RDS DB instance", name + "-" + string(index),
            "has engine", r.applied.engine,
            "that is not in the allowed list:", allowed_engines)
          validated = false
        }

      } // end resource instances
    } // end named resources
  } // end resorce maps

  # Return validated which will be false if there were any violators
  return validated
}

# Rule to restrict RDS DB engines
engine_allowed = rule {
  validate_engines()
}

# Main rule that requires other rules to be true
main = rule {
  engine_allowed
}
