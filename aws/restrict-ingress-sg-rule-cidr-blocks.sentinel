##### restrict-ingress-sg-rule-cidr-blocks.sentinel #####
# This policy uses the Sentinel tfplan import to validate that
# no security group rules have the CIDR "0.0.0.0/0"

##### Imports #####

import "tfplan"
import "strings"
import "types"

##### Functions #####

# Find all resources of a specific type
# from all modules using the tfplan import
find_resources_from_plan = func(type) {

  # Start with an empty map
  resource_maps = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {

    # Append all resources of the specified type to resource_maps
    # setting the key to the module path. Set the empty map, {}, If the
    # module does not have any resources of the specified type.
    resource_maps[path] = tfplan.module(path).resources[type] else {}
  }

  # return resource_maps
  return resource_maps
}

# Get the full address of a resource instance including modules, type,
# name, and index in form module.<A>.module.<B>.<type>.<name>[<index>]
# module_path is like module paths returned by tfplan.module_paths
get_instance_address = func(module_path, type, name, index) {

  # Handle root and non-root modules differently
  if length(module_path) == 0 {
    # root module
    address = type + "." + name + "[" + string(index) + "]"
  } else {
    # non-root module
    address = "module." + strings.join(module_path, ".module.") + "." + type + "." + name + "[" + string(index) + "]"
  }

  return address

}

# Validate that all AWS ingress security group rules
# do not have cidr_block 0.0.0.0/0
validate_sgr_cidr_blocks = func() {

  # Initialize validated to true
  # This will be set to false if any SG rules violate rule
  validated = true

  # Set resource_type
  resource_type = "aws_security_group_rule"

  # Get all resources of specified type
  resource_maps = find_resources_from_plan(resource_type)

  # Loop through the module-level resource maps
  for resource_maps as module_path, resource_map {
    # Loop through the named resources
    for resource_map as name, instances {
      # Loop through resource instances
      for instances as index, r {

        # Get addresses of the resource and the instance
        address = get_instance_address(module_path, resource_type, name, index)

        # Skip resources that are being destroyed
        # to avoid unnecessary policy violations
        if length(r.diff) == 0 {
          print("Skipping resource", address,
            "that is being destroyed.")
          continue
        }

        # Validate that each SG rule does not have disallowed value
        # If it does, print violation message
        # Since cidr_blocks is optional and could be computed,
        # We check that it is present and really a list
        # before checking whether it contains "0.0.0.0/0"
        if r.applied.type is "ingress" and
           length(r.applied.cidr_blocks) else 0 > 0 and
           types.type_of(r.applied.cidr_blocks) is "list" and
           r.applied.cidr_blocks contains "0.0.0.0/0" {
             print("Ingress security group rule", address,
               "contains disallowed cidr_block 0.0.0.0/0" )
             validated = false
        }

      } // end resource instances
    } // end named resources
  } // end resorce maps

  # Return validated which will be false if there were any violators
  return validated
}

##### Rules #####

# Rule to restrict ingress security group rules
sgrs_validated = validate_sgr_cidr_blocks()
restrict_ingress_sgrs = rule {
  sgrs_validated is true
}

# Main rule that requires other rules to be true
main = rule {
  restrict_ingress_sgrs
}
