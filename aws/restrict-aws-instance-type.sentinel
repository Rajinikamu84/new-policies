# imports
import "tfplan"

# Find all resources of a specific type
# from all modules using the tfplan import
find_resources_from_plan = func(type) {

  # Start with an empty list
  resources = []

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Append all resources of the specified type
    # or the empty map, {}, if the module does not have any
    append(resources, (tfplan.module(path).resources[type] else {}))
  }

  return resources
}

# Allowed EC2 Instance Types
# We don't include t2.micro to illustrate overriding failed policy
allowed_types = [
  "t2.small",
  "t2.medium",
  "t2.large",
]

# Validate that all EC2 instances have instance_type
# in allowed_types list
validate_instance_types = func() {

  # Initialize validated to true
  # This will be set to false if any instances violate rule
  validated = true

  # Get all AWS instances
  all_resources = find_resources_from_plan("aws_instance")

  # Loop through the module-level resource maps
  for all_resources as resource_map {
    # Loop through the named resources
    for resource_map as name, instances {
      # Loop through resource instances
      for instances as index, r {

        # Skip resources that are being destroyed
        # to avoid unnecessary policy violations
        if length(r.diff) == 0 {
          print("Skipping resource", name + "-" + string(index), "that is being destroyed.")
          continue
        }

        # Validate that each instance has allowed value
        # If not, print violation message
        if r.applied.instance_type not in allowed_types {
          print("aws_instance", name + "-" + string(index),
            "has attribute", r.applied.instance_type,
            "that is not in the list", allowed_types)
          validated = false
        }

      } // end resource instances
    } // end named resources
  } // end resorce maps

  # Return validated which will be false if there were any violators
  return validated
}

# Rule to restrict EC2 instance types
instance_type_allowed = rule {
  validate_instance_types()
}

# Main rule that requires other rules to be true
main = rule {
  instance_type_allowed
}
